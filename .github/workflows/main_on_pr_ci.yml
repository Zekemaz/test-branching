name: Main_PR_CI

on:
  pull_request:
    types: [opened, reopened, edited, synchronize]
    branches:
      - main
        
jobs:      
  check_pull_request_if_opened:
    if: startsWith(github.head_ref, 'feature/')
    runs-on: ubuntu-latest
    name: Check if feature has been merge onto the develop branch
    steps:
      - name: Fetch all branches
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get merged branches
        run: |
          echo origin/feature/${GITHUB_HEAD_REF##*/}
          echo $(git branch -r --merged origin/develop)
          if [ $(git branch -r --merged origin/develop | grep origin/feature/${GITHUB_HEAD_REF##*/}) && $(git branch -r --merged origin/develop | grep origin/feature/${GITHUB_HEAD_REF##*/}) != origin/feature/]; then
            echo "The branch feature/${GITHUB_HEAD_REF##*/} is allowed to be merged into master since it has already been merged into develop"
            exit 0
          else
            echo "The current pull request is not allowed as the feature/${GITHUB_HEAD_REF##*/} has not been merge into develop yet"
            exit 1
          fi
          
  check_for_validated_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/github-script@v6
        with:
          name: test-results-artifact
          path: ./test-results/test-artifact.txt
      - name: Display content of test-artifact
        run: cat test-artifact.txt
        working-directory: ./test-results/test-artifact.txt
#          script: |
#            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               run_id: context.payload.workflow_run.id,
#            });
#            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
#              return artifact.name == "test-results-artifact"
#            })[0];
#            let download = await github.rest.actions.downloadArtifact({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               artifact_id: matchArtifact.id,
#               archive_format: 'zip',
#            });
#            let fs = require('fs');
#            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/test-results-artifact.zip`, Buffer.from(download.data));

#      - name: Unzip artifacts
#        run: unzip test-results-artifact.zip
#          - name: 'Comment on PR'
#            uses: actions/github-script@v6
#            with:
#              github-token: ${{ secrets.GITHUB_TOKEN }}
#              script: |
#                let fs = require('fs');
#                let issue_number = Number(fs.readFileSync('./test-results-artifact'));
#                await github.rest.issues.createComment({
#                  owner: context.repo.owner,
#                  repo: context.repo.repo,
#                  issue_number: issue_number,
#                  body: 'Thank you for the PR!'
#                });
