<<<<<<< Updated upstream
name: MainCI

on:
#  push:
#    branches:
#      - "feature/*"
  pull_request:
    types: [opened, reopened, edited, synchronize]
    branches:
      - main
  workflow_run:
    workflows: [DevelopCI]
    types:
      - completed


# https://stackoverflow.com/questions/62750603/github-actions-trigger-another-action-after-one-action-is-completed#:~:text=2.-,Separate,-workflow%2C%20using%20the
=======
name: API CI

on:
  push:
    branches:
      - "feature/*"
  pull_request:
    types: [opened, reopened, edited, synchronize]
    branches:
      - "main"


>>>>>>> Stashed changes
jobs:
  check_pr:
    runs-on: ubuntu-latest
    name: Check if feature has been merge onto the develop branch

    steps:
      - name: Fetch all branches
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get merged branches
        run: |
<<<<<<< Updated upstream
          if [ $(git branch -r --merged origin/develop | grep origin/feature/${GITHUB_HEAD_REF##*/}) != origin/feature/${GITHUB_HEAD_REF##*/} && $(git branch -r --merged origin/develop | grep origin/feature/${GITHUB_HEAD_REF##*/}) != origin/feature/]; then
=======
          if [ $(git branch -r --merged origin/develop | grep origin/feature/${GITHUB_HEAD_REF##*/}) != origin/feature/${GITHUB_HEAD_REF##*/} ]; then
>>>>>>> Stashed changes
            echo "The current pull request is not allowed as the feature/${GITHUB_HEAD_REF##*/} has not been merge into develop yet"
            exit 1
          else
            echo "The branch feature/${GITHUB_HEAD_REF##*/} is allowed to be merged into master since it has already been merged into develop"
            exit 0
          fi

#          if [ "$(git branch -r --merged origin/develop origin/feature/${GITHUB_HEAD_REF##*/})" != "origin/feature/${GITHUB_HEAD_REF##*/}" ]; then
#            echo "The current Pull Request is not allowed as the feature/${GITHUB_HEAD_REF##*/} has not been merge into develop yet"
#            exit 1
#          else
#            echo "The branch feature/${GITHUB_REF##*/} is allowed to be merged into master"
#            exit 0
#          fi



# feature merge vers dev
# edit pr de master pour la mettre à jour
#
# if pr de feature vers master vérifier que merge bien sur develop
#
#
#
#
#
#


#  echo "1" ${GITHUB_HEAD_REF##*/}
#  echo "2" ${GITHUB_REF##*/}
#  echo "3" $(git branch -r --merged origin/develop origin/feature/${GITHUB_HEAD_REF##*/})
#  echo "4" $(git branch -r --merged origin/develop)
#  echo "5" origin/feature/${GITHUB_HEAD_REF##*/}
#  echo "6" $(git branch -r --no-merged origin/develop)
#  echo "7" $(git branch -r --no-merged origin/develop | grep origin/feature/${GITHUB_HEAD_REF##*/})
#  if [ $(git branch -r --no-merged origin/develop | grep origin/feature/${GITHUB_HEAD_REF##*/}) == origin/feature/${GITHUB_HEAD_REF##*/} ]; then
#  echo "branche trouvée donc pas bon";
#  fi
#  if [ $(git branch -r --no-merged origin/develop | grep origin/feature/${GITHUB_HEAD_REF##*/}) != origin/feature/${GITHUB_HEAD_REF##*/} ]; then
#  echo "branche pas trouvée donc OK";
#  fi